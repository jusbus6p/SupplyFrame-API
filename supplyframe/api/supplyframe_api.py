# coding: utf-8

"""
    Supplyframe API

    <h2>Supplyframe API Gateway</h2>  Collection of Supplyframe endpoints exposed through the Supplyframe API Gateway.  <h3>Authorization</h3>  All requests should be authorized with parameter \"token\" set to value provided by Supplyframe. In addition to \"token,\" for routes that are intended to be used by end-user applications, parameter \"uuid\" is required. \"uuid\" should represent a unique identifier of the end-user. It can be generated as a random string that's unique for the duration of the user session, and should not contain any PII information.  <h3>Response</h3>  Response is a JSON object. Response should not be consumed if the status code has a value other than 200.  <h3>Status codes returned by API</h3>  <table>     <tr>         <td>200</td>         <td>valid response, consume body</td>     </tr>     <tr>         <td>400</td>         <td>bad request</td>     </tr>     <tr>         <td>401</td>         <td>unauthorized request</td>     </tr>     <tr>         <td>404</td>         <td>route does not exist</td>     </tr>     <tr>         <td>429</td>         <td>too many requests. Rate limiting is based on token and uuid provided</td>     </tr>     <tr>         <td>500</td>         <td>internal server error</td>     </tr> </table>  <h3>Versioning</h3>  API is versioned. Each route has it's own version counting. For each change in API response, new parameter supported, fields added or removed new version will be released.   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from supplyframe.api_client import ApiClient


class SupplyFrameApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def documentationv1postman(self, token, **kwargs):  # noqa: E501
        """/documentation/v1/postman  # noqa: E501

        Retrives documentation in Postman Collection v2.1 format for routes available to consumer with provided token.  Response is JSON conforming to Postman Collection v2.1 schema.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documentationv1postman(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.documentationv1postman_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.documentationv1postman_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def documentationv1postman_with_http_info(self, token, **kwargs):  # noqa: E501
        """/documentation/v1/postman  # noqa: E501

        Retrives documentation in Postman Collection v2.1 format for routes available to consumer with provided token.  Response is JSON conforming to Postman Collection v2.1 schema.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documentationv1postman_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documentationv1postman" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `documentationv1postman`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/documentation/v1/postman', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def normalizationv1manufacturer(self, token, uuid, query, **kwargs):  # noqa: E501
        """/normalization/v1/manufacturer  # noqa: E501

        Returns normalized manufacturer metadata based on the user-provided manufacturer name or alias.  Response is JSON array containing manufacturer objects. Each manufacturer object has following keys: <table>  <tr>   <td>name</td>   <td>normalized manufacturer name</td>  </tr>  <tr>   <td>id</td>   <td>unique manufacturer id</td>  </tr> </table>  Example request:  <pre> /normalization/v1/manufacturer?query=texas&token=PROVIDED TOKEN&uuid=UNIQUE USER ID </pre>  Example response: <pre> [{  \"name\": \"Texas Instruments\",  \"id\": 2477 }] </pre>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.normalizationv1manufacturer(token, uuid, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :param str uuid: Unique user identifier. Non-empty string. (required)
        :param str query: Manufacturer name to be normalized. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.normalizationv1manufacturer_with_http_info(token, uuid, query, **kwargs)  # noqa: E501
        else:
            (data) = self.normalizationv1manufacturer_with_http_info(token, uuid, query, **kwargs)  # noqa: E501
            return data

    def normalizationv1manufacturer_with_http_info(self, token, uuid, query, **kwargs):  # noqa: E501
        """/normalization/v1/manufacturer  # noqa: E501

        Returns normalized manufacturer metadata based on the user-provided manufacturer name or alias.  Response is JSON array containing manufacturer objects. Each manufacturer object has following keys: <table>  <tr>   <td>name</td>   <td>normalized manufacturer name</td>  </tr>  <tr>   <td>id</td>   <td>unique manufacturer id</td>  </tr> </table>  Example request:  <pre> /normalization/v1/manufacturer?query=texas&token=PROVIDED TOKEN&uuid=UNIQUE USER ID </pre>  Example response: <pre> [{  \"name\": \"Texas Instruments\",  \"id\": 2477 }] </pre>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.normalizationv1manufacturer_with_http_info(token, uuid, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :param str uuid: Unique user identifier. Non-empty string. (required)
        :param str query: Manufacturer name to be normalized. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'uuid', 'query']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method normalizationv1manufacturer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `normalizationv1manufacturer`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `normalizationv1manufacturer`")  # noqa: E501
        # verify the required parameter 'query' is set
        if self.api_client.client_side_validation and ('query' not in params or
                                                       params['query'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `query` when calling `normalizationv1manufacturer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))  # noqa: E501
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/normalization/v1/manufacturer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parametricv1query(self, token, uuid, **kwargs):  # noqa: E501
        """/parametric/v1/query  # noqa: E501

        Retrieve part parametric data based on a set of given query constraints.  Response is a JSON object with the following keys:  <table>     <tr>         <td>metadata</td>         <td>Object containing response metadata.</td>     </tr>     <tr>         <td>response</td>         <td>Array of part data objects. Each object contains set of fields corresponding to the part's class and category. For a full list of all available fields as well as the fields specific for particular class and category please consult the /parametric/v1/schema/query route.</td>     </tr>     <tr>         <td>facet</td>         <td>Object representing faceting results (if requested).</td>     </tr> </table>   <b>Constraints</b> Constraints are set by appending query parameters with a name of the field and its expected value (example: \"Manufacturer Part Number=bav99\"). List of fields that are searchable on can be found under the searchFields section in /parametric/v1/schema/query. Multiple constraints can be set and logical AND is used between them.  <b>Multiple values search</b> Logical OR is supported on field level by providing multiple values as constraint. Number of values should not be greater than 100. Example: \"Tolerance=5.0||2.0\".  <b>Range search</b> Range search can be perform by providing lower and upper bound values separated with a dash (example: \"Modified On=2021-02-13 02:10:38-2021-02-13 03:10:38\"). Range values are inclusive. The list of fields for range search is located under the rangeFields section in /parametric/v1/schema/query. Open interval is supported by using \"*\" for upper or lower bound value, example: \"Resistance=150-*\" will return all parts with resistance of 150 and greater.  <b>Sorting</b> Results can be sorted by appending a sort parameter. Results can be sorted in an ascending or descending manner. To sort on a specific field, add parameter \"sort\" with field name as value followed with \"asc\" or \"desc\" to specify the sort order (example \"sort=Modified On desc\"). Consult sortFields in /parametric/v1/schema/query for list of supported fields. Without the sort parameter, results are sorted by default according to their popularity score. Multiple sort parameters can be used.  <b>Faceting</b> To facet on a specific field, use the parameter \"facets\" with a field name as a value. Multiple fields can be used for faceting by separating fields with \"||\". Example \"facets=Class||Category\". Consult facetFields in /parametric/v1/schema/query for list of supported fields. Facets will return up to 50 values per field.  <b>Free text search</b> Results can also be filtered by using a free text search of part descriptions by using the parameter \"term\" (example: \"term=bav99\"). Minimum length of \"term\" is 3 characters. Term value will be ignored if used in combination with parametric filtering on Class, Category, Manufacturer and Manufacturer Part Number fields. When free text search is performed resulting parts could belong to different classes and categories. Class and category fields can be used for classification.  <b>Pagination and results limiting</b> It is possible to limit number of results to be returned in a single query with a \"limit\" parameter. Limit should be a number between 1 and 100. Default value is 10.  In addition to results limiting it is possible to retrieve more than 100 results per query by using pagination. Use the parameter \"start\" to indicate the order of the first result in pagination. Start should have value between 0 and 999. By using pagination and maximum limit it's possible to return up to 1100 results per a specific query.  <b>Classes and categories</b>  Classes and categories represent hierarchy. Each class consists of set of categories. Once new class or category is added or old class or category is removed new version of route will be released.  <b>Unique part identifier</b>  Each part has \"uid\" field which could be threaded as unique identifier of part.  <b>Textual fields case sensitivity</b>  Some textual fields are case sensitive some not. For list of case insensitive textual fields consult /parametric/v1/schema/query route. All other textual fields are case sensitive.  <b>Numeric fields unit</b>  Numeric fields have implicit unit assigned to them. When using numeric fields in constraints values should be provided as number without unit. For numeric field unit consult \"fields\" part of /parametric/v1/schema/query route.  <b>Manufacturer Part Number matching</b>  Manufacturer Part Number matching has advanced logic which tries to match best part based on provided part number, similar to infix search.   <b>Simplified response</b> <pre> {     \"metadata\": {         \"timestamp\": 1643320147413     },     \"response\": [         {             \"Package Body Material\": \"PLASTIC/EPOXY\",             \"Package Image URL\": \"http://content.supplyframe.com/images/process/fit-in/100x100/p/sot23_3.jpg\",             \"Configuration\": \"SERIES CONNECTED, CENTER TAP, 2 ELEMENTS\",             \"Diode Type\": \"RECTIFIER DIODE\",             \"Surface Mount\": \"YES\",             \"Output Current-Max\": 0.2,             \"Forward Voltage-Max (VF)\": 0.715,             \"Source Url\": \"https://www.rocelec.com/part/FAIFSCBAV99?utm_source=Supplyframe&utm_medium=SEP\",             \"Reverse Recovery Time-Max\": 0.006,             \"Terminal Form\": \"GULL WING\",             \"Manufacturer\": \"Fairchild Semiconductor Corporation\",             \"Package Shape\": \"RECTANGULAR\",             \"Number of Elements\": 2,             \"Base Number\": \"BAV99\",             \"HTS Code\": \"8541.10.00.70\",             \"Manufacturer Part Number\": \"BAV99\",             \"Pin Count\": \"3\",             \"FFF Group\": \"N001013270\",             \"Number of Terminals\": \"3\",             \"Package Style\": \"SMALL OUTLINE\",             \"Rohs Code\": \"Yes\",             \"Rep Pk Reverse Voltage-Max\": 70.0,             \"Class\": \"Diodes\",             \"Reach Compliance Code\": \"compliant\",             \"Operating Temperature-Max\": 150.0,             \"Description\": \"Rectifier Diode, 2 Element, 0.2A, 70V V(RRM), Silicon, SOT-23, 3 PIN\",             \"Category\": \"Rectifier Diodes\",             \"Modified On\": \"2019-06-21 03:52:11\",             \"Terminal Finish\": \"Matte Tin (Sn)\",             \"Military Spec\": \"false\",             \"uid\": 1014837,             \"Part Life Cycle Code\": \"Transferred\",             \"Terminal Position\": \"DUAL\",             \"JESD-30 Code\": \"R-PDSO-G3\",             \"Moisture Sensitivity Level\": \"1\",             \"ECCN Code\": \"EAR99\",             \"Clean Description\": \"Diodes Rectifier Diodes\",             \"Qualification Status\": \"Not Qualified\",             \"Pbfree Code\": \"Yes\",             \"Power Dissipation-Max\": 0.35,             \"mfrid\": 1978,             \"Link Tags\": \"[BAV99]\",             \"Current Datasheet Url\": \"https://datasheet.datasheetarchive.com/originals/distributors/Datasheets-DGA14/683951.pdf\",             \"Status Code\": \"active\",             \"Additional Feature\": \"ULTRA FAST\",             \"Category Id\": 157445543,             \"Non-rep Pk Forward Current-Max\": 1.0,             \"JESD-609 Code\": \"e3\",             \"Manufacturer Package Code\": \"3LD, SOT23, JEDEC TO-236, LOW PROFILE\",             \"Time@Peak Reflow Temperature-Max (s)\": \"NOT SPECIFIED\",             \"Brand Name\": \"Fairchild Semiconductor\",             \"Peak Reflow Temperature (Cel)\": \"NOT SPECIFIED\",             \"Package Description\": \"R-PDSO-G3\",             \"Diode Element Material\": \"SILICON\",             \"Subcategory\": \"Rectifier Diodes\",             \"Part Package Code\": \"SOT-23\",             \"Functional Group\": \"A000198499\"         }     ],     \"facet\": {         \"Manufacturer\": {             \"PanJit Semiconductor\": 57,             \"Nexperia\": 46,             \"Diodes Incorporated\": 40,             \"Infineon Technologies AG\": 40,             \"onsemi\": 35         }     } } </pre>  <b>Examples</b>  Lookup for bav99 with active part lifecycle, facet on manufacturer <pre> /parametric/v1/query?Manufacturer Part Number=bav99&Part Life Cycle Code=active&facets=Manufacturer&token=PROVIDED TOKEN&uuid=UNIQUE USER ID </pre>  Free text search for 1206VA and results sorted by Capacitance in descending order <pre> /parametric/v1/query?term=1206VA&sort=Capacitance desc&token=PROVIDED TOKEN&uuid=UNIQUE USER ID </pre>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parametricv1query(token, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :param str uuid: Unique user identifier. Non-empty string. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parametricv1query_with_http_info(token, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.parametricv1query_with_http_info(token, uuid, **kwargs)  # noqa: E501
            return data

    def parametricv1query_with_http_info(self, token, uuid, **kwargs):  # noqa: E501
        """/parametric/v1/query  # noqa: E501

        Retrieve part parametric data based on a set of given query constraints.  Response is a JSON object with the following keys:  <table>     <tr>         <td>metadata</td>         <td>Object containing response metadata.</td>     </tr>     <tr>         <td>response</td>         <td>Array of part data objects. Each object contains set of fields corresponding to the part's class and category. For a full list of all available fields as well as the fields specific for particular class and category please consult the /parametric/v1/schema/query route.</td>     </tr>     <tr>         <td>facet</td>         <td>Object representing faceting results (if requested).</td>     </tr> </table>   <b>Constraints</b> Constraints are set by appending query parameters with a name of the field and its expected value (example: \"Manufacturer Part Number=bav99\"). List of fields that are searchable on can be found under the searchFields section in /parametric/v1/schema/query. Multiple constraints can be set and logical AND is used between them.  <b>Multiple values search</b> Logical OR is supported on field level by providing multiple values as constraint. Number of values should not be greater than 100. Example: \"Tolerance=5.0||2.0\".  <b>Range search</b> Range search can be perform by providing lower and upper bound values separated with a dash (example: \"Modified On=2021-02-13 02:10:38-2021-02-13 03:10:38\"). Range values are inclusive. The list of fields for range search is located under the rangeFields section in /parametric/v1/schema/query. Open interval is supported by using \"*\" for upper or lower bound value, example: \"Resistance=150-*\" will return all parts with resistance of 150 and greater.  <b>Sorting</b> Results can be sorted by appending a sort parameter. Results can be sorted in an ascending or descending manner. To sort on a specific field, add parameter \"sort\" with field name as value followed with \"asc\" or \"desc\" to specify the sort order (example \"sort=Modified On desc\"). Consult sortFields in /parametric/v1/schema/query for list of supported fields. Without the sort parameter, results are sorted by default according to their popularity score. Multiple sort parameters can be used.  <b>Faceting</b> To facet on a specific field, use the parameter \"facets\" with a field name as a value. Multiple fields can be used for faceting by separating fields with \"||\". Example \"facets=Class||Category\". Consult facetFields in /parametric/v1/schema/query for list of supported fields. Facets will return up to 50 values per field.  <b>Free text search</b> Results can also be filtered by using a free text search of part descriptions by using the parameter \"term\" (example: \"term=bav99\"). Minimum length of \"term\" is 3 characters. Term value will be ignored if used in combination with parametric filtering on Class, Category, Manufacturer and Manufacturer Part Number fields. When free text search is performed resulting parts could belong to different classes and categories. Class and category fields can be used for classification.  <b>Pagination and results limiting</b> It is possible to limit number of results to be returned in a single query with a \"limit\" parameter. Limit should be a number between 1 and 100. Default value is 10.  In addition to results limiting it is possible to retrieve more than 100 results per query by using pagination. Use the parameter \"start\" to indicate the order of the first result in pagination. Start should have value between 0 and 999. By using pagination and maximum limit it's possible to return up to 1100 results per a specific query.  <b>Classes and categories</b>  Classes and categories represent hierarchy. Each class consists of set of categories. Once new class or category is added or old class or category is removed new version of route will be released.  <b>Unique part identifier</b>  Each part has \"uid\" field which could be threaded as unique identifier of part.  <b>Textual fields case sensitivity</b>  Some textual fields are case sensitive some not. For list of case insensitive textual fields consult /parametric/v1/schema/query route. All other textual fields are case sensitive.  <b>Numeric fields unit</b>  Numeric fields have implicit unit assigned to them. When using numeric fields in constraints values should be provided as number without unit. For numeric field unit consult \"fields\" part of /parametric/v1/schema/query route.  <b>Manufacturer Part Number matching</b>  Manufacturer Part Number matching has advanced logic which tries to match best part based on provided part number, similar to infix search.   <b>Simplified response</b> <pre> {     \"metadata\": {         \"timestamp\": 1643320147413     },     \"response\": [         {             \"Package Body Material\": \"PLASTIC/EPOXY\",             \"Package Image URL\": \"http://content.supplyframe.com/images/process/fit-in/100x100/p/sot23_3.jpg\",             \"Configuration\": \"SERIES CONNECTED, CENTER TAP, 2 ELEMENTS\",             \"Diode Type\": \"RECTIFIER DIODE\",             \"Surface Mount\": \"YES\",             \"Output Current-Max\": 0.2,             \"Forward Voltage-Max (VF)\": 0.715,             \"Source Url\": \"https://www.rocelec.com/part/FAIFSCBAV99?utm_source=Supplyframe&utm_medium=SEP\",             \"Reverse Recovery Time-Max\": 0.006,             \"Terminal Form\": \"GULL WING\",             \"Manufacturer\": \"Fairchild Semiconductor Corporation\",             \"Package Shape\": \"RECTANGULAR\",             \"Number of Elements\": 2,             \"Base Number\": \"BAV99\",             \"HTS Code\": \"8541.10.00.70\",             \"Manufacturer Part Number\": \"BAV99\",             \"Pin Count\": \"3\",             \"FFF Group\": \"N001013270\",             \"Number of Terminals\": \"3\",             \"Package Style\": \"SMALL OUTLINE\",             \"Rohs Code\": \"Yes\",             \"Rep Pk Reverse Voltage-Max\": 70.0,             \"Class\": \"Diodes\",             \"Reach Compliance Code\": \"compliant\",             \"Operating Temperature-Max\": 150.0,             \"Description\": \"Rectifier Diode, 2 Element, 0.2A, 70V V(RRM), Silicon, SOT-23, 3 PIN\",             \"Category\": \"Rectifier Diodes\",             \"Modified On\": \"2019-06-21 03:52:11\",             \"Terminal Finish\": \"Matte Tin (Sn)\",             \"Military Spec\": \"false\",             \"uid\": 1014837,             \"Part Life Cycle Code\": \"Transferred\",             \"Terminal Position\": \"DUAL\",             \"JESD-30 Code\": \"R-PDSO-G3\",             \"Moisture Sensitivity Level\": \"1\",             \"ECCN Code\": \"EAR99\",             \"Clean Description\": \"Diodes Rectifier Diodes\",             \"Qualification Status\": \"Not Qualified\",             \"Pbfree Code\": \"Yes\",             \"Power Dissipation-Max\": 0.35,             \"mfrid\": 1978,             \"Link Tags\": \"[BAV99]\",             \"Current Datasheet Url\": \"https://datasheet.datasheetarchive.com/originals/distributors/Datasheets-DGA14/683951.pdf\",             \"Status Code\": \"active\",             \"Additional Feature\": \"ULTRA FAST\",             \"Category Id\": 157445543,             \"Non-rep Pk Forward Current-Max\": 1.0,             \"JESD-609 Code\": \"e3\",             \"Manufacturer Package Code\": \"3LD, SOT23, JEDEC TO-236, LOW PROFILE\",             \"Time@Peak Reflow Temperature-Max (s)\": \"NOT SPECIFIED\",             \"Brand Name\": \"Fairchild Semiconductor\",             \"Peak Reflow Temperature (Cel)\": \"NOT SPECIFIED\",             \"Package Description\": \"R-PDSO-G3\",             \"Diode Element Material\": \"SILICON\",             \"Subcategory\": \"Rectifier Diodes\",             \"Part Package Code\": \"SOT-23\",             \"Functional Group\": \"A000198499\"         }     ],     \"facet\": {         \"Manufacturer\": {             \"PanJit Semiconductor\": 57,             \"Nexperia\": 46,             \"Diodes Incorporated\": 40,             \"Infineon Technologies AG\": 40,             \"onsemi\": 35         }     } } </pre>  <b>Examples</b>  Lookup for bav99 with active part lifecycle, facet on manufacturer <pre> /parametric/v1/query?Manufacturer Part Number=bav99&Part Life Cycle Code=active&facets=Manufacturer&token=PROVIDED TOKEN&uuid=UNIQUE USER ID </pre>  Free text search for 1206VA and results sorted by Capacitance in descending order <pre> /parametric/v1/query?term=1206VA&sort=Capacitance desc&token=PROVIDED TOKEN&uuid=UNIQUE USER ID </pre>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parametricv1query_with_http_info(token, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :param str uuid: Unique user identifier. Non-empty string. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parametricv1query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `parametricv1query`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in params or
                                                       params['uuid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uuid` when calling `parametricv1query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'uuid' in params:
            query_params.append(('uuid', params['uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/parametric/v1/query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parametricv1schemaquery(self, token, **kwargs):  # noqa: E501
        """/parametric/v1/schema/query  # noqa: E501

        Describes a set of fields that can be returned by the /parametric/v1/query route and parameters that can be used for querying.  Response is a JSON object with the following keys: <table>  <tr>   <td>fields</td>   <td>name, type and unit of field that can be returned. Unit is set for some numeric fields.</td>  </tr>  <tr>   <td>classCategoryFields</td>   <td>list of fields that can be returned for each class and category</td>  </tr>  <tr>   <td>searchFields</td>   <td>list of fields that can be used for searching</td>  </tr>  <tr>   <td>sortFields</td>   <td>list of fields that can be used for sorting</td>  </tr>  <tr>   <td>rangeFields</td>   <td>list of fields that can be used for range search</td>  </tr>  <tr>   <td>facetFields</td>   <td>list of fields on which facets can be computed</td>  </tr>  <tr>   <td>caseInsensitiveFields</td>   <td>list of case-insensitive textual fields</td>  </tr> </table>   <b>Simplified response</b></br> <pre> {  \"caseInsensitiveFields\": [\"Window Dimension\", \"Circuit Protection Type\", \"Inductor Type\"],  \"classCategoryFields\": [{    \"class\": \"Amplifier Circuits\",    \"category\": \"Sample and Hold Circuits\",    \"fields\": [\"Source Sample Url\", \"Supply Current-Max\", \"Terminal Form\"]   },   {    \"class\": \"Circuit Protection\",    \"category\": \"Electric Fuses\",    \"fields\": [\"Built-in Feature\", \"Fuse Size\", \"Source Url Status Check Date\"]   },   {    \"class\": \"Connectors\",    \"category\": \"Fiber Optic Adapters\",    \"fields\": [\"Source Sample Url\", \"Manufacturer Series\", \"Manufacturer\"]   }  ],  \"searchFields\": [\"Window Dimension\", \"Circuit Protection Type\", \"Insertion Loss (Tx)\"],  \"rangeFields\": [\"Insertion Loss (Tx)\", \"Body Length\", \"Input Voltage Absolute-Max\"],  \"sortFields\": [\"Number of LEDs in Array\", \"Communication Standard\", \"Number of Outputs\"],  \"fields\": [{    \"name\": \"Circuit Protection Type\",    \"type\": \"string\"   },   {    \"name\": \"Insertion Loss (Tx)\",    \"type\": \"number\",    \"unit\": \"dB\"   },   {    \"name\": \"Body Length\",    \"type\": \"number\",    \"unit\": \"inch\"   }  ],  \"facetFields\": [\"Window Dimension\", \"Circuit Protection Type\", \"Insertion Loss (Tx)\"] } </pre>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parametricv1schemaquery(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parametricv1schemaquery_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.parametricv1schemaquery_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def parametricv1schemaquery_with_http_info(self, token, **kwargs):  # noqa: E501
        """/parametric/v1/schema/query  # noqa: E501

        Describes a set of fields that can be returned by the /parametric/v1/query route and parameters that can be used for querying.  Response is a JSON object with the following keys: <table>  <tr>   <td>fields</td>   <td>name, type and unit of field that can be returned. Unit is set for some numeric fields.</td>  </tr>  <tr>   <td>classCategoryFields</td>   <td>list of fields that can be returned for each class and category</td>  </tr>  <tr>   <td>searchFields</td>   <td>list of fields that can be used for searching</td>  </tr>  <tr>   <td>sortFields</td>   <td>list of fields that can be used for sorting</td>  </tr>  <tr>   <td>rangeFields</td>   <td>list of fields that can be used for range search</td>  </tr>  <tr>   <td>facetFields</td>   <td>list of fields on which facets can be computed</td>  </tr>  <tr>   <td>caseInsensitiveFields</td>   <td>list of case-insensitive textual fields</td>  </tr> </table>   <b>Simplified response</b></br> <pre> {  \"caseInsensitiveFields\": [\"Window Dimension\", \"Circuit Protection Type\", \"Inductor Type\"],  \"classCategoryFields\": [{    \"class\": \"Amplifier Circuits\",    \"category\": \"Sample and Hold Circuits\",    \"fields\": [\"Source Sample Url\", \"Supply Current-Max\", \"Terminal Form\"]   },   {    \"class\": \"Circuit Protection\",    \"category\": \"Electric Fuses\",    \"fields\": [\"Built-in Feature\", \"Fuse Size\", \"Source Url Status Check Date\"]   },   {    \"class\": \"Connectors\",    \"category\": \"Fiber Optic Adapters\",    \"fields\": [\"Source Sample Url\", \"Manufacturer Series\", \"Manufacturer\"]   }  ],  \"searchFields\": [\"Window Dimension\", \"Circuit Protection Type\", \"Insertion Loss (Tx)\"],  \"rangeFields\": [\"Insertion Loss (Tx)\", \"Body Length\", \"Input Voltage Absolute-Max\"],  \"sortFields\": [\"Number of LEDs in Array\", \"Communication Standard\", \"Number of Outputs\"],  \"fields\": [{    \"name\": \"Circuit Protection Type\",    \"type\": \"string\"   },   {    \"name\": \"Insertion Loss (Tx)\",    \"type\": \"number\",    \"unit\": \"dB\"   },   {    \"name\": \"Body Length\",    \"type\": \"number\",    \"unit\": \"inch\"   }  ],  \"facetFields\": [\"Window Dimension\", \"Circuit Protection Type\", \"Insertion Loss (Tx)\"] } </pre>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parametricv1schemaquery_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Access token provided by Supplyframe. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parametricv1schemaquery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in params or
                                                       params['token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token` when calling `parametricv1schemaquery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/parametric/v1/schema/query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
